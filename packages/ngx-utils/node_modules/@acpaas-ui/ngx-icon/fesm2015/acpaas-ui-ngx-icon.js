import { Injectable, ɵɵdefineInjectable, Component, Renderer2, HostBinding, Input, NgModule } from '@angular/core';
import { __awaiter } from 'tslib';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IconService {
    constructor() { }
}
IconService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IconService.ctorParameters = () => [];
/** @nocollapse */ IconService.ngInjectableDef = ɵɵdefineInjectable({ factory: function IconService_Factory() { return new IconService(); }, token: IconService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IconComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.className = '';
        this.fetchAntwerpIcons = (/**
         * @return {?}
         */
        () => __awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                const xlinkHref = 'https://cdn.antwerpen.be/core_branding_scss/5.0.0/assets/images/ai.svg';
                /** @type {?} */
                const response = yield fetch(xlinkHref);
                /** @type {?} */
                const svgText = yield response.text();
                /** @type {?} */
                const svgWrapper = this.renderer.createElement('svg');
                this.renderer.setAttribute(svgWrapper, 'id', 'aiSvg');
                /** @type {?} */
                const svgIcons = new DOMParser().parseFromString(svgText, 'text/html').querySelector('body > svg');
                this.renderer.appendChild(svgWrapper, svgIcons);
                if (!document.getElementById('aiSvg')) {
                    this.renderer.appendChild(document.body, svgWrapper);
                }
            }
            catch (err) {
                throw new Error(err);
            }
        }));
    }
    /**
     * @return {?}
     */
    get classes() {
        return [
            'ai',
            this.className,
            this.name,
        ].filter(Boolean).join(' ');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!document.getElementById('aiSvg')) {
            this.fetchAntwerpIcons();
        }
    }
}
IconComponent.decorators = [
    { type: Component, args: [{
                selector: 'aui-icon',
                template: "<svg aria-hidden=\"true\"><use [attr.href]=\"'#' + name\" /></svg>\n<span class=\"u-screen-reader-only\" *ngIf=\"ariaLabel\">{{ ariaLabel }}</span>\n",
                styles: [':host { display: inline-flex; }']
            }] }
];
/** @nocollapse */
IconComponent.ctorParameters = () => [
    { type: Renderer2 }
];
IconComponent.propDecorators = {
    classes: [{ type: HostBinding, args: ['attr.class',] }],
    name: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    className: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IconComponent.prototype.name;
    /** @type {?} */
    IconComponent.prototype.ariaLabel;
    /** @type {?} */
    IconComponent.prototype.className;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.fetchAntwerpIcons;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IconModule {
}
IconModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IconComponent],
                imports: [
                    CommonModule,
                ],
                exports: [IconComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: acpaas-ui-ngx-icon.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { IconComponent, IconModule, IconService };
//# sourceMappingURL=acpaas-ui-ngx-icon.js.map
