/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Renderer2 } from '@angular/core';
var IconComponent = /** @class */ (function () {
    function IconComponent(renderer) {
        var _this = this;
        this.renderer = renderer;
        this.className = '';
        this.fetchAntwerpIcons = (/**
         * @return {?}
         */
        function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var xlinkHref, response, svgText, svgWrapper, svgIcons, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        xlinkHref = 'https://cdn.antwerpen.be/core_branding_scss/5.0.0/assets/images/ai.svg';
                        return [4 /*yield*/, fetch(xlinkHref)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.text()];
                    case 2:
                        svgText = _a.sent();
                        svgWrapper = this.renderer.createElement('svg');
                        this.renderer.setAttribute(svgWrapper, 'id', 'aiSvg');
                        svgIcons = new DOMParser().parseFromString(svgText, 'text/html').querySelector('body > svg');
                        this.renderer.appendChild(svgWrapper, svgIcons);
                        if (!document.getElementById('aiSvg')) {
                            this.renderer.appendChild(document.body, svgWrapper);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        throw new Error(err_1);
                    case 4: return [2 /*return*/];
                }
            });
        }); });
    }
    Object.defineProperty(IconComponent.prototype, "classes", {
        get: /**
         * @return {?}
         */
        function () {
            return [
                'ai',
                this.className,
                this.name,
            ].filter(Boolean).join(' ');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IconComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!document.getElementById('aiSvg')) {
            this.fetchAntwerpIcons();
        }
    };
    IconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'aui-icon',
                    template: "<svg aria-hidden=\"true\"><use [attr.href]=\"'#' + name\" /></svg>\n<span class=\"u-screen-reader-only\" *ngIf=\"ariaLabel\">{{ ariaLabel }}</span>\n",
                    styles: [':host { display: inline-flex; }']
                }] }
    ];
    /** @nocollapse */
    IconComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    IconComponent.propDecorators = {
        classes: [{ type: HostBinding, args: ['attr.class',] }],
        name: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        className: [{ type: Input }]
    };
    return IconComponent;
}());
export { IconComponent };
if (false) {
    /** @type {?} */
    IconComponent.prototype.name;
    /** @type {?} */
    IconComponent.prototype.ariaLabel;
    /** @type {?} */
    IconComponent.prototype.className;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.fetchAntwerpIcons;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWNwYWFzLXVpL25neC1pY29uLyIsInNvdXJjZXMiOlsibGliL2ljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakY7SUFrQkUsdUJBQ1UsUUFBbUI7UUFEN0IsaUJBRUs7UUFESyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSGIsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQVl2QixzQkFBaUI7OztRQUFHOzs7Ozs7d0JBRWxCLFNBQVMsR0FBRyx3RUFBd0U7d0JBQ3pFLHFCQUFNLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBQTs7d0JBQWpDLFFBQVEsR0FBRyxTQUFzQjt3QkFDdkIscUJBQU0sUUFBUSxDQUFDLElBQUksRUFBRSxFQUFBOzt3QkFBL0IsT0FBTyxHQUFHLFNBQXFCO3dCQUMvQixVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO3dCQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO3dCQUNoRCxRQUFRLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7d0JBQ2xHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQzt3QkFFaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7NEJBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7eUJBQ3REOzs7O3dCQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsS0FBRyxDQUFDLENBQUM7Ozs7YUFFeEIsRUFBQTtJQXhCRyxDQUFDO0lBZEwsc0JBQStCLGtDQUFPOzs7O1FBQXRDO1lBQ0UsT0FBTztnQkFDTCxJQUFJO2dCQUNKLElBQUksQ0FBQyxTQUFTO2dCQUNkLElBQUksQ0FBQyxJQUFJO2FBQ1YsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUM7OztPQUFBOzs7O0lBVUQsZ0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDOztnQkExQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxVQUFVO29CQUNwQixpS0FBb0M7NkJBQzNCLGlDQUFpQztpQkFDM0M7Ozs7Z0JBTitDLFNBQVM7OzswQkFRdEQsV0FBVyxTQUFDLFlBQVk7dUJBUXhCLEtBQUs7NEJBQ0wsS0FBSzs0QkFDTCxLQUFLOztJQThCUixvQkFBQztDQUFBLEFBOUNELElBOENDO1NBekNZLGFBQWE7OztJQVN4Qiw2QkFBNkI7O0lBQzdCLGtDQUFrQzs7SUFDbEMsa0NBQStCOzs7OztJQVkvQiwwQ0FnQkM7Ozs7O0lBekJDLGlDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhdWktaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogaW5saW5lLWZsZXg7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgSWNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBIb3N0QmluZGluZygnYXR0ci5jbGFzcycpIGdldCBjbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdhaScsXG4gICAgICB0aGlzLmNsYXNzTmFtZSxcbiAgICAgIHRoaXMubmFtZSxcbiAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG4gIH1cblxuICBASW5wdXQoKSBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgYXJpYUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBjbGFzc05hbWUgPSAnJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhaVN2ZycpKSB7XG4gICAgICB0aGlzLmZldGNoQW50d2VycEljb25zKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmZXRjaEFudHdlcnBJY29ucyA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeGxpbmtIcmVmID0gJ2h0dHBzOi8vY2RuLmFudHdlcnBlbi5iZS9jb3JlX2JyYW5kaW5nX3Njc3MvNS4wLjAvYXNzZXRzL2ltYWdlcy9haS5zdmcnO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh4bGlua0hyZWYpO1xuICAgICAgY29uc3Qgc3ZnVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIGNvbnN0IHN2Z1dyYXBwZXIgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ3N2ZycpO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc3ZnV3JhcHBlciwgJ2lkJywgJ2FpU3ZnJyk7XG4gICAgICBjb25zdCBzdmdJY29ucyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoc3ZnVGV4dCwgJ3RleHQvaHRtbCcpLnF1ZXJ5U2VsZWN0b3IoJ2JvZHkgPiBzdmcnKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQoc3ZnV3JhcHBlciwgc3ZnSWNvbnMpO1xuXG4gICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhaVN2ZycpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuYm9keSwgc3ZnV3JhcHBlcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gIH1cblxufVxuIl19