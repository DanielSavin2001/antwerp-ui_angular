import { Injectable, ɵɵdefineInjectable, Component, Renderer2, HostBinding, Input, NgModule } from '@angular/core';
import { __awaiter, __generator } from 'tslib';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IconService = /** @class */ (function () {
    function IconService() {
    }
    IconService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IconService.ctorParameters = function () { return []; };
    /** @nocollapse */ IconService.ngInjectableDef = ɵɵdefineInjectable({ factory: function IconService_Factory() { return new IconService(); }, token: IconService, providedIn: "root" });
    return IconService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IconComponent = /** @class */ (function () {
    function IconComponent(renderer) {
        var _this = this;
        this.renderer = renderer;
        this.className = '';
        this.fetchAntwerpIcons = (/**
         * @return {?}
         */
        function () { return __awaiter(_this, void 0, void 0, function () {
            var xlinkHref, response, svgText, svgWrapper, svgIcons, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        xlinkHref = 'https://cdn.antwerpen.be/core_branding_scss/5.0.0/assets/images/ai.svg';
                        return [4 /*yield*/, fetch(xlinkHref)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.text()];
                    case 2:
                        svgText = _a.sent();
                        svgWrapper = this.renderer.createElement('svg');
                        this.renderer.setAttribute(svgWrapper, 'id', 'aiSvg');
                        svgIcons = new DOMParser().parseFromString(svgText, 'text/html').querySelector('body > svg');
                        this.renderer.appendChild(svgWrapper, svgIcons);
                        if (!document.getElementById('aiSvg')) {
                            this.renderer.appendChild(document.body, svgWrapper);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        throw new Error(err_1);
                    case 4: return [2 /*return*/];
                }
            });
        }); });
    }
    Object.defineProperty(IconComponent.prototype, "classes", {
        get: /**
         * @return {?}
         */
        function () {
            return [
                'ai',
                this.className,
                this.name,
            ].filter(Boolean).join(' ');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IconComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!document.getElementById('aiSvg')) {
            this.fetchAntwerpIcons();
        }
    };
    IconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'aui-icon',
                    template: "<svg aria-hidden=\"true\"><use [attr.href]=\"'#' + name\" /></svg>\n<span class=\"u-screen-reader-only\" *ngIf=\"ariaLabel\">{{ ariaLabel }}</span>\n",
                    styles: [':host { display: inline-flex; }']
                }] }
    ];
    /** @nocollapse */
    IconComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    IconComponent.propDecorators = {
        classes: [{ type: HostBinding, args: ['attr.class',] }],
        name: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        className: [{ type: Input }]
    };
    return IconComponent;
}());
if (false) {
    /** @type {?} */
    IconComponent.prototype.name;
    /** @type {?} */
    IconComponent.prototype.ariaLabel;
    /** @type {?} */
    IconComponent.prototype.className;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.fetchAntwerpIcons;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IconModule = /** @class */ (function () {
    function IconModule() {
    }
    IconModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IconComponent],
                    imports: [
                        CommonModule,
                    ],
                    exports: [IconComponent]
                },] }
    ];
    return IconModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: acpaas-ui-ngx-icon.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { IconComponent, IconModule, IconService };
//# sourceMappingURL=acpaas-ui-ngx-icon.js.map
