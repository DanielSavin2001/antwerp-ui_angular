/**
 * @fileoverview added by tsickle
 * Generated from: lib/icon.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Renderer2 } from '@angular/core';
export class IconComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.className = '';
        this.fetchAntwerpIcons = (/**
         * @return {?}
         */
        () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                const xlinkHref = 'https://cdn.antwerpen.be/core_branding_scss/5.0.0/assets/images/ai.svg';
                /** @type {?} */
                const response = yield fetch(xlinkHref);
                /** @type {?} */
                const svgText = yield response.text();
                /** @type {?} */
                const svgWrapper = this.renderer.createElement('svg');
                this.renderer.setAttribute(svgWrapper, 'id', 'aiSvg');
                /** @type {?} */
                const svgIcons = new DOMParser().parseFromString(svgText, 'text/html').querySelector('body > svg');
                this.renderer.appendChild(svgWrapper, svgIcons);
                if (!document.getElementById('aiSvg')) {
                    this.renderer.appendChild(document.body, svgWrapper);
                }
            }
            catch (err) {
                throw new Error(err);
            }
        }));
    }
    /**
     * @return {?}
     */
    get classes() {
        return [
            'ai',
            this.className,
            this.name,
        ].filter(Boolean).join(' ');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!document.getElementById('aiSvg')) {
            this.fetchAntwerpIcons();
        }
    }
}
IconComponent.decorators = [
    { type: Component, args: [{
                selector: 'aui-icon',
                template: "<svg aria-hidden=\"true\"><use [attr.href]=\"'#' + name\" /></svg>\n<span class=\"u-screen-reader-only\" *ngIf=\"ariaLabel\">{{ ariaLabel }}</span>\n",
                styles: [':host { display: inline-flex; }']
            }] }
];
/** @nocollapse */
IconComponent.ctorParameters = () => [
    { type: Renderer2 }
];
IconComponent.propDecorators = {
    classes: [{ type: HostBinding, args: ['attr.class',] }],
    name: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    className: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IconComponent.prototype.name;
    /** @type {?} */
    IconComponent.prototype.ariaLabel;
    /** @type {?} */
    IconComponent.prototype.className;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.fetchAntwerpIcons;
    /**
     * @type {?}
     * @private
     */
    IconComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWNwYWFzLXVpL25neC1pY29uLyIsInNvdXJjZXMiOlsibGliL2ljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBVSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPakYsTUFBTSxPQUFPLGFBQWE7Ozs7SUFheEIsWUFDVSxRQUFtQjtRQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSGIsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQVl2QixzQkFBaUI7OztRQUFHLEdBQVMsRUFBRTtZQUNyQyxJQUFJOztzQkFDSSxTQUFTLEdBQUcsd0VBQXdFOztzQkFDcEYsUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQzs7c0JBQ2pDLE9BQU8sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUU7O3NCQUMvQixVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO2dCQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDOztzQkFDaEQsUUFBUSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO2dCQUNsRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBRWhELElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2lCQUN0RDthQUNGO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN0QjtRQUNILENBQUMsQ0FBQSxFQUFBO0lBeEJHLENBQUM7Ozs7SUFkTCxJQUErQixPQUFPO1FBQ3BDLE9BQU87WUFDTCxJQUFJO1lBQ0osSUFBSSxDQUFDLFNBQVM7WUFDZCxJQUFJLENBQUMsSUFBSTtTQUNWLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7O0lBVUQsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7O1lBMUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsaUtBQW9DO3lCQUMzQixpQ0FBaUM7YUFDM0M7Ozs7WUFOK0MsU0FBUzs7O3NCQVF0RCxXQUFXLFNBQUMsWUFBWTttQkFReEIsS0FBSzt3QkFDTCxLQUFLO3dCQUNMLEtBQUs7Ozs7SUFGTiw2QkFBNkI7O0lBQzdCLGtDQUFrQzs7SUFDbEMsa0NBQStCOzs7OztJQVkvQiwwQ0FnQkM7Ozs7O0lBekJDLGlDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhdWktaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogaW5saW5lLWZsZXg7IH0nXSxcbn0pXG5leHBvcnQgY2xhc3MgSWNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBIb3N0QmluZGluZygnYXR0ci5jbGFzcycpIGdldCBjbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFtcbiAgICAgICdhaScsXG4gICAgICB0aGlzLmNsYXNzTmFtZSxcbiAgICAgIHRoaXMubmFtZSxcbiAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG4gIH1cblxuICBASW5wdXQoKSBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgYXJpYUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBjbGFzc05hbWUgPSAnJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhaVN2ZycpKSB7XG4gICAgICB0aGlzLmZldGNoQW50d2VycEljb25zKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmZXRjaEFudHdlcnBJY29ucyA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeGxpbmtIcmVmID0gJ2h0dHBzOi8vY2RuLmFudHdlcnBlbi5iZS9jb3JlX2JyYW5kaW5nX3Njc3MvNS4wLjAvYXNzZXRzL2ltYWdlcy9haS5zdmcnO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh4bGlua0hyZWYpO1xuICAgICAgY29uc3Qgc3ZnVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIGNvbnN0IHN2Z1dyYXBwZXIgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ3N2ZycpO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc3ZnV3JhcHBlciwgJ2lkJywgJ2FpU3ZnJyk7XG4gICAgICBjb25zdCBzdmdJY29ucyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoc3ZnVGV4dCwgJ3RleHQvaHRtbCcpLnF1ZXJ5U2VsZWN0b3IoJ2JvZHkgPiBzdmcnKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQoc3ZnV3JhcHBlciwgc3ZnSWNvbnMpO1xuXG4gICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhaVN2ZycpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuYm9keSwgc3ZnV3JhcHBlcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gIH1cblxufVxuIl19